#!/usr/bin/perl
use 5.014 ; use strict ; use warnings ; 
use List::Util ; 
use List::MoreUtils qw[uniq] ;
use Term::ANSIColor qw[:constants] ; $Term::ANSIColor::AUTORESET=1 ;
use IO::Uncompress::Unzip qw[ unzip $UnzipError ] ; 
use Getopt::Std ; getopts '%256r:o' , \my%o ;
use Time::HiRes qw [ gettimeofday tv_interval ] ;
my ${ dt_start } = [ gettimeofday ] ; 

END{
  my $lt = sprintf '%04d-%02d-%02d %02d:%02d:%02d' , do {my @t = @{[localtime]}[5,4,3,2,1,0] ; $t[0]+=1900 ; $t[1]++ ; @t } ; 
  say STDERR CYAN FAINT BOLD tv_interval( ${ dt_start } ) , " seconds spent ($0 $lt)"; 
}

my %m2h ; # メッシュから人数 ;  h は HUMAN のつもり
my %mj2h ; # メッシュと自治体から人数
my %m2p ;  # メッシュ8桁から自治体コード5桁を参照する


MUNI_FILE_IF_R : 
if ( $o{r} ) { 
  my $cmd = ! $o{2} ? "gawk -F, '{print \$1,\$3}' $o{r}" : "gawk -F, '{print substr(\$1,1,2),\$3}' $o{r}" ;
  open my $FH , '-|' , $cmd ; # $/ = "\r\n" ; 
  while ( <$FH> ) { 
    chomp ; 
    next unless /^\d/ ; 
    my @F = split / / , $_ , 2 ; 
    $m2p { $F[1] } = $F[0] ; # $o{2} ? substr $F[0], 0, 2 : $F[0] ;
  }
  close $FH ; 
}

FILE1 :
open my $FH , '-|' , "unzip -p $ARGV[0] | gawk -F, '{print \$3,\$7}' " or die  ; # パイプを使うことで高速化(プロセス並列化)
while ( <$FH> ) { 
  next unless /^\d/ ;
  chomp ; 
  my @F = split / / , $_ , 2 ; 
  $m2h{ $F[0] } = $F[1] ; # メッシュ9桁から人口を参照
}
close $FH ; 

FILE2 : 
my $prop ; # 読みとる属性 (AWKの形式で)
$prop = $o{5} ? $o{6} ? '$5":"$6' : '$5' : $o{6} ? '$6' : '$4' ; 
open $FH , '-|' , "unzip -p $ARGV[1] | gawk -F, '{print \$3,$prop,\$7}'" or die ; # 3:area, 4:residence, 7:population
$prop = $o{5} ? $o{6} ? 'age:gen' : 'age' : $o{6} ? 'gen' : 'muni' ; # <-- ここに書いたのは、混乱生むかも
while ( <$FH> ) { 
  next unless /^\d/ ;
  chomp ; 
  my @F = split / / , $_ , 3 ;
  $mj2h { $F[0] } { $F[1] } = $F[2] ; # メッシュ9桁と住民票の自治体コード(2〜5桁)から人口を参照
}
close $FH ;

VISIT_BY_MESH :
if ( $o{o} ) { & visit () ; exit }
sub visit () { 
  
  say UNDERLINE join "\t", '¹/₂mesh', $prop, "FILE1", "FILE2" ;
  for my $m ( keys %mj2h ) { 
    for my $j ( keys %{ $mj2h{$m} } ) { 
      say join "\t", $m, $j ,  (ITALIC $m2h{$m}//0) , (BOLD $mj2h{$m}{$j}) ; 
    }
  }
}

MESH2PREF : ## メッシュから、自治体を参照可能にする計算
my %M2J ; # メッシュから自治体を参照
my %m2h0 ; # メッシュから、最も自治体の人数を格納
my %k2p ; # 自治体から人数計を参照
my %k2p0 ; # 自治体から、その自治体の人と思われる人の数を合計

#if ( ! $o{r} ) { 
if ( 1 ) {
	for my $m ( keys %mj2h ) { 
	  my ( $tk, $tp ) = ( 0, 0 ) ; # 最大値を持つ自治体を探索		
	  for my $k ( keys %{ $mj2h{$m} } ) { 
	    if ( $tp < $mj2h{$m}{$k} ) { 
	      $tp = $mj2h{$m}{$k} ; 
	      $tk = $k ; 
	    }
	  }
	  $M2J{ $m } = $tk ;
	  $m2h0{ $m } = $tp ; 
	}
}
#say 5;  exit ; 

## my %m2h ; # メッシュから人数 ;  h は HUMAN のつもり
## my %mj2h ; # メッシュと自治体から人数
## my %m2p ;  # メッシュ8桁から自治体コード5桁を参照する

PREF2POPULATIONS : ## 各自治体で、人数2通りを集計
#my %k2p ; # 自治体から人数計を参照
#my %k2p0 ; # 自治体から、その自治体の人と思われる人の数を合計
for my $m ( keys %m2h ){
  next if ! exists  $M2J{ $m }  ; 
  my $k = $m2p { substr( $m, 0, 8 ) } // $M2J { $m } ;  # <-- - ちとトリッキー ; -r なら //の左項がdefined
  #say 5 ;
  $k2p  { $k } += $m2h  { $m } ; 
  $k2p0 { $k } += ($m2h0 { $m }//0) ; 
}

OUTPUT4PREFS : ## 出力
say UNDERLINE join "\t" , $prop, qw[ FILE1 FILE2 alien_ratio ] ;
for ( sort keys %k2p ) { 
  my $p  = $k2p  {$_} ; 
  my $p0 = $k2p0 {$_} ; 
  my $val = $o{'%'} ? ($p-$p0)/$p * 100 : ($p-$p0)/$p ;
  say join "\t" , $_ , $p , $p0 , $val ;
}



exit 0 ;



=encoding utf8 

=head1

  いろんな属性の人が、どれだけ人の集まるメッシュに行ったのかを、出力する。
  下記でFILE2が、*00002*.zip だと各都道府県のエリア外から来た様子、*00003*.zip だと各自治体の外から来た様子が出力。

  $0 [-o] FILE1 FILE2 

  FILE1 : 各メッシュの全人口を読む ; (必然的に)提供ファイル*0.csv.zip 
  FILE2 ; 住居情報付きの情報を読む ; 提供ファイル*00000[23].csv.zip ; 
  1番目のファイルでまず各メッシュの人口を記録
  2番目のファイルで、何かする。

  メッシュコードから、制定された自治体コードを見るようなことは、していない。

 オプション : 
    -o : ある自治体に住む何人が、どれだけ人が集まったメッシュに出掛けたのか、各メッシュごとに細かく見る。
    -% ; 割合を百分率で表示
    -2 : 
    -5 ; 年齢帯を読み取る
    -6 ; 性別を読み取る (-5と併用できる)

 開発上のメモ: 
   * split関数による方法よりも高速化するために、固定長にしたらどうだろうか?	

=cut 

## ヘルプとバージョン情報
BEGIN {
  $Getopt::Std::STANDARD_HELP_VERSION = 1 ; 
  grep { m/--help/} @ARGV and *VERSION_MESSAGE = sub {} ; 
  our $VERSION = 0.11 ;
    # 最初は 0.21 を目安とする。
    # 1.00 以上とする必要条件は英語版のヘルプをきちんと出すこと。
    # 2.00 以上とする必要条件はテストコードが含むこと。
}  
sub HELP_MESSAGE{
    use FindBin qw[ $Script ] ; 
    $ARGV[1] //= '' ;
    open my $FH , '<' , $0 ;
    while(<$FH>){
        s/\$0/$Script/g ;
        print $_ if $ARGV[1] eq 'opt' ? m/^\ +\-/ : s/^=head1// .. s/^=cut// ;
    }
    close $FH ;
    exit 0 ;
}
